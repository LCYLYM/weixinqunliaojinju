#!/usr/bin/env node

/**
 * ÂêåÊ≠• GitHub Issues Âà∞ quotes.json
 * ÁõëÂê¨Â∏¶ "ÈáëÂè•" Ê†áÁ≠æÁöÑ IssuesÔºåÊèêÂèñÂõæÁâáÂπ∂ÂêåÊ≠•Âà∞Êï∞ÊçÆÊñá‰ª∂
 */

const fs = require('fs');
const path = require('path');
const https = require('https');

const QUOTES_FILE = path.join(process.cwd(), 'quotes.json');
const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
const REPO = process.env.GITHUB_REPOSITORY || 'LCYLYM/weixinqunliaojinju';

// GitHub API Helper
function githubAPI(endpoint, method = 'GET', body = null) {
    const [owner, repo] = REPO.split('/');
    const url = `https://api.github.com/repos/${owner}/${repo}${endpoint}`;
    
    return new Promise((resolve, reject) => {
        const options = {
            method,
            headers: {
                'User-Agent': 'Quote-Wall-Bot',
                'Accept': 'application/vnd.github+json',
                'Authorization': `Bearer ${GITHUB_TOKEN}`,
                'X-GitHub-Api-Version': '2022-11-28'
            }
        };

        const req = https.request(url, options, (res) => {
            let data = '';
            res.on('data', chunk => data += chunk);
            res.on('end', () => {
                if (res.statusCode >= 200 && res.statusCode < 300) {
                    resolve(JSON.parse(data || '{}'));
                } else {
                    reject(new Error(`API Error: ${res.statusCode} ${data}`));
                }
            });
        });

        req.on('error', reject);
        if (body) req.write(JSON.stringify(body));
        req.end();
    });
}

// ÊèêÂèñ Issue ‰∏≠ÁöÑÂõæÁâá
function extractImages(issueBody) {
    const imageRegex = /!\[.*?\]\((https:\/\/.*?)\)/g;
    const images = [];
    let match;
    
    while ((match = imageRegex.exec(issueBody)) !== null) {
        images.push(match[1]);
    }
    
    // ‰πüÂåπÈÖçÁõ¥Êé•ÁöÑÂõæÁâáÈìæÊé•
    const directImageRegex = /(https:\/\/user-images\.githubusercontent\.com\/.*?\.(png|jpg|jpeg|gif|webp))/gi;
    while ((match = directImageRegex.exec(issueBody)) !== null) {
        if (!images.includes(match[1])) {
            images.push(match[1]);
        }
    }
    
    return images;
}

// ‰∏ªÂáΩÊï∞
async function main() {
    console.log('üîÑ Starting quote sync from GitHub Issues...');
    
    // ËØªÂèñÁé∞ÊúâÊï∞ÊçÆ
    let quotes = [];
    if (fs.existsSync(QUOTES_FILE)) {
        quotes = JSON.parse(fs.readFileSync(QUOTES_FILE, 'utf8'));
    }
    
    // Ëé∑ÂèñÊâÄÊúâÂ∏¶ "ÈáëÂè•" Ê†áÁ≠æÁöÑÂºÄÊîæ Issues
    const issues = await githubAPI('/issues?labels=ÈáëÂè•&state=open&per_page=100');
    console.log(`üìä Found ${issues.length} open quote issues`);
    
    // ÂàõÂª∫Êñ∞ÁöÑ quotes Êï∞ÁªÑÔºàÂü∫‰∫é IssuesÔºâ
    const newQuotes = [];
    const existingIds = new Set(quotes.map(q => q.issueId));
    
    for (const issue of issues) {
        const images = extractImages(issue.body || '');
        
        if (images.length === 0) {
            console.log(`‚ö†Ô∏è  Issue #${issue.number} has no images, skipping`);
            continue;
        }
        
        // Ëé∑ÂèñËØÑËÆ∫Êï∞Ôºà‰Ωú‰∏∫‰∏æÊä•Êï∞Ôºâ
        const comments = await githubAPI(`/issues/${issue.number}/comments`);
        const reportCount = comments.filter(c => 
            c.body && (c.body.includes('‰∏æÊä•') || c.body.includes('report'))
        ).length;
        
        // Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÈöêËóèÔºà‰∏æÊä•Ë∂ÖËøá3Ê¨°ÊàñÂ∑≤ÂÖ≥Èó≠Ôºâ
        const hidden = reportCount >= 3 || issue.state === 'closed';
        
        // Êü•ÊâæÁé∞ÊúâËÆ∞ÂΩïÊàñÂàõÂª∫Êñ∞ËÆ∞ÂΩï
        let quote = quotes.find(q => q.issueId === issue.number);
        
        if (!quote) {
            quote = {
                id: Date.now() + Math.random(),
                issueId: issue.number,
                issueUrl: issue.html_url,
                image: images[0], // ‰ΩøÁî®Á¨¨‰∏ÄÂº†ÂõæÁâá
                timestamp: issue.created_at,
                reports: reportCount,
                hidden: hidden
            };
            console.log(`‚úÖ New quote from issue #${issue.number}`);
        } else {
            // Êõ¥Êñ∞Áé∞ÊúâËÆ∞ÂΩï
            quote.reports = reportCount;
            quote.hidden = hidden;
            quote.image = images[0]; // Êõ¥Êñ∞ÂõæÁâáÔºàÂ¶ÇÊûú‰øÆÊîπ‰∫ÜÔºâ
            console.log(`üîÑ Updated quote from issue #${issue.number}`);
        }
        
        newQuotes.push(quote);
    }
    
    // ÊåâÊó∂Èó¥ÂÄíÂ∫èÊéíÂàó
    newQuotes.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
    
    // ÂÜôÂÖ•Êñá‰ª∂
    fs.writeFileSync(QUOTES_FILE, JSON.stringify(newQuotes, null, 2));
    console.log(`üíæ Saved ${newQuotes.length} quotes to ${QUOTES_FILE}`);
    console.log('‚ú® Sync complete!');
}

// ËøêË°å
main().catch(error => {
    console.error('‚ùå Error:', error);
    process.exit(1);
});
